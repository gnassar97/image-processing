# -*- coding: utf-8 -*-
"""Lab_3_part_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0D5BEdYdiojnmCXvNHu_J2nSAzgl1wn
"""

!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab3/ex1.jpg
!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab3/ex2.jpg
!ls

import skimage
from skimage import io, filters, img_as_ubyte
import numpy as np
import math as m
import matplotlib.pyplot as plt 
from skimage import feature
from scipy import ndimage as ndi

sample_data = "ex2.jpg"

def main():
    img = io.imread(sample_data, as_gray=True)

    fig, im = plt.subplots(nrows=1, ncols=2, figsize=(24,11), sharex=True, sharey=True)
    plt.subplot(1,2,1)
    plt.imshow(img, cmap = 'gray')
    plt.xticks([]), plt.yticks([])
    
    img_gaussian = filters.gaussian(img)
    plt.subplot(1,2,2)
    plt.imshow(img_gaussian, cmap = 'gray')
    plt.xticks([]), plt.yticks([])
    plt.show()

    canny_edges(img)
    canny_sigma(img)


def canny_edges(img):
    sigma = 1
    a = canny(img, sigma, 25, None)
    b = canny(img, sigma, 50, None)
    c = canny(img, sigma, None, 150)
    d = canny(img, sigma, None, 200)

    fig, im = plt.subplots(nrows=2, ncols=2, figsize=(24,11), sharex=True, sharey=True)

    plt.subplot(2,2,1),plt.imshow(a, cmap = 'gray'),plt.title('Low Threshold = 25')
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,2),plt.imshow(b, cmap = 'gray'),plt.title('Low Threshold = 50')
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,3),plt.imshow(c, cmap = 'gray'),plt.title('High Threshold = 150')
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,4),plt.imshow(d, cmap = 'gray'),plt.title('High Threshold = 200')
    plt.xticks([]), plt.yticks([])


    plt.show()

    
def canny_sigma(img):
    sigma = [1.0,1.5,2.0,2.5]
    low = 50
    high = 150
    result = []
    for i in sigma:
        result.append(canny(img,i,low,high))

    fig, im = plt.subplots(nrows=2, ncols=2, figsize=(24,11), sharex=True, sharey=True)
    plt.subplot(2,2,1),plt.imshow(result[0], cmap = 'gray'),plt.title('Sigma = 1.0')
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,2),plt.imshow(result[1], cmap = 'gray'),plt.title('Sigma = 1.5')
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,3),plt.imshow(result[2], cmap = 'gray'),plt.title('Sigma = 2.0')
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,4),plt.imshow(result[3], cmap = 'gray'),plt.title('Sigma = 2.5')
    plt.xticks([]), plt.yticks([])


    plt.show()

    
def canny(img, sigma, low, high):
    return feature.canny(img, sigma=sigma,low_threshold=low, high_threshold=high)   
  
    

main()