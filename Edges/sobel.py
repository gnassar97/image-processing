# -*- coding: utf-8 -*-
"""Lab_3_part_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O8GmMExs-80zDX7WHI4EbxW3XgcYD8dF
"""

!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab3/ex1.jpg
!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab3/ex2.jpg
!ls

import skimage
from skimage import io, filters, img_as_ubyte
import numpy as np
import math
import matplotlib.pyplot as plt 

sample_data = 'ex2.jpg'

def main():
    img = io.imread(sample_data, as_gray=True)
    img_h = sobel(img,'h')
    img_v = sobel(img,'v')
    img_gradient = gradient(img_h, img_v)

    fig, im = plt.subplots(nrows=2, ncols=2, figsize=(24,11), sharex=True, sharey=True)
    plt.subplot(2,2,1),plt.imshow(img, cmap = 'gray'),plt.title('Original'),plt.colorbar()
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,2),plt.imshow(img_h, cmap = 'gray'),plt.title("Horizontal Sobel"),plt.colorbar()
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,3),plt.imshow(img_v, cmap = 'gray'),plt.title("Vertical Sobel"),plt.colorbar()
    plt.xticks([]), plt.yticks([])
    plt.subplot(2,2,4),plt.imshow(img_gradient[0], cmap = 'gray'),plt.title("Simple Gradient (Addition)"),plt.colorbar()
    plt.xticks([]), plt.yticks([])
    plt.show()

    plt.imshow(img_gradient[1], cmap = 'gray'),plt.title("Actual Gradient (Hypotenuse)"),plt.colorbar()
    plt.xticks([]), plt.yticks([])
    plt.show()

        
    
def sobel(img, orientation):
    if orientation == 'h':
        img = filters.sobel_h(img)   
    elif orientation == 'v':
        img = filters.sobel_v(img)
    return img

def gradient(horizontal, vertical):
    x = len(horizontal)
    y = len(horizontal[1])    
    grad = np.zeros((x,y), np.float32)
    grad_correct = np.zeros((x,y), np.float32)

    for i in range(x):
        for j in range(y):
            grad_correct[i][j] = math.sqrt((math.pow(horizontal[i][j], 2) + math.pow(vertical[i][j], 2)))
            grad[i][j] = horizontal[i][j] + vertical[i][j]
    return grad,grad_correct       


         
main()