# -*- coding: utf-8 -*-
"""Lab6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MbjxQWJKRHRcryuJXoYWvWo6J-YbcuNP
"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import io, filters, img_as_ubyte
from scipy.signal import convolve2d as conv2
import scipy.ndimage
import skimage
import math

!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab6/lab6.bmp
!ls

"""# Part1"""

#  Create a Laplacian-of-Gaussian Volume
# steps 1-3
#
imfile = 'lab6.bmp'

    
image = io.imread(imfile)
h,w = image.shape

sigma = 2

gaus_img = filters.gaussian(image, sigma)

sigma_list = [3,4,5]
level = []
index = [0,1,2]
img_copy = np.copy(gaus_img)



for i in sigma_list:
  k = 2*round(3*i)+1
  gaus_blur = filters.gaussian(img_copy, i)
  laplace = filters.laplace(gaus_blur, k)
  level.append(laplace)
  for j in index:
    new_img = np.zeros((h,w,3),np.float64)
    new_img[ :, :, j] = laplace
    laplace = filters.laplace(laplace, k)

plt.imshow(level[0], cmap = 'jet'),plt.title("Level 1")
plt.show()
plt.imshow(level[1], cmap = 'jet'),plt.title("Level 2")
plt.show()
plt.imshow(level[2], cmap = 'jet'),plt.title("Level 3")
plt.show()



plt.imshow(image,cmap='gray'),plt.title("original")
plt.show()
plt.imshow(gaus_img,cmap='jet'),plt.title("initial gaussian blur")
plt.show()

#steps 4 nd 5

"""# Part2"""

#Obtain a rough estimate of blob locations

lm = scipy.ndimage.filters.minimum_filter(new_img, 20)

msk = (new_img == lm)

img_sum = np.sum(msk,axis=2)

points = np.nonzero(img_sum)

plt.scatter(points[1], points[0], edgecolors= 'None', c='r', s = 10)
plt.imshow(image, cmap = 'jet'),plt.title("Rough blobs detected in image")

plt.show()

"""# Part3"""

# Refine the blobs using Otsu thresholding
convert_img = img_as_ubyte(gaus_img)
thresh = filters.threshold_otsu(convert_img)
img_mult = np.multiply(img_sum, convert_img >= thresh)

[y,x] = img_mult.nonzero()


plt.imshow(image, cmap = 'jet'), plt.title("Refined blobs detected in the image")
plt.scatter(x,y,c = 'r', s = 7)

plt.show()