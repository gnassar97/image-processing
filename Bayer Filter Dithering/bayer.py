# -*- coding: utf-8 -*-
"""Lab_4_part_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C_BzI0lcnSxsf337Y_ux6UA69JRYJlLT
"""

import numpy as np
import math
from matplotlib import pyplot as plt
from skimage import io

!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab4/PeppersBayerGray.bmp
!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab4/gridR.bmp
!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab4/gridG.bmp
!wget -q -nc https://raw.githubusercontent.com/pseprivamirakbarnejad/cmput206lab/master/Lab4/gridB.bmp
!ls

filename_Grayimage = 'PeppersBayerGray.bmp'
filename_gridB = 'gridB.bmp'
filename_gridR = 'gridR.bmp'
filename_gridG = 'gridG.bmp'



# part I



img = io.imread(filename_Grayimage, as_gray =True)

h,w = img.shape

# our final image will be a 3 dimentional image with 3 channels
rgb = np.zeros((h,w,3),np.uint8);


# reconstruction of the green channel IG

IG = np.copy(img) # copy the image into each channel
IR = np.copy(img)
IB = np.copy(img)


for row in range(0,h,4): # loop step is 4 since our mask size is 4.
    for col in range(0,w,4): # loop step is 4 since our mask size is 4.
          IG[row,col+1]=(int(img[row,col])+int(img[row,col+2]))/2 #B
          IG[row+1,col]=(int(img[row,col])+int(img[row+2,col]))/2 #E
          IG[row+3,col]= (int(img[row+2,col])+int(img[row+3,col+1]))/2 #M
          IG[row,col+3]= (int(img[row,col+2])+int(img[row+1,col+3]))/2 #D
          IG[row+1,col+2]= (int(img[row,col+2])+int(img[row+1,col+1])+int(img[row+1,col+3])+int(img[row+2,col+2]))/4 #G
          IG[row+2,col+1]= (int(img[row+2,col])+int(img[row+1,col+1])+int(img[row+3,col+1])+int(img[row+2,col+2]))/4 #J
          IG[row+2,col+3]= (int(img[row+1,col+3])+int(img[row+3,col+3]))/2 #L
          IG[row+3,col+2]= (int(img[row+3,col+1])+int(img[row+3,col+3]))/2 #O

for row in range(0,h,4): # loop step is 4 since our mask size is 4.
    for col in range(0,w,4): # loop step is 4 since our mask size is 4.
          IR[row+1,col+1]=(int(img[row,col+1])+int(img[row+2,col+1]))/2 #F
          IR[row,col+2]=(int(img[row,col+1])+int(img[row,col+3]))/2 #C
          IR[row+1,col+3]= (int(img[row,col+3])+int(img[row+2,col+3]))/2 #H
          IR[row+2,col+2]= (int(img[row+2,col+3])+int(img[row+2,col+1]))/2 #K
          IR[row+1,col+2]= (int(img[row,col+1])+int(img[row,col+3])+int(img[row+2,col+1])+int(img[row+2,col+3]))/4 #G
          IR[row,col]=IR[row,col+1] #A
          IR[row+1,col]=IR[row+1,col+1] #E
          IR[row+2,col]=IR[row+2,col+1] #I
          IR[row+3,col+3]=IR[row+2,col+3] #P
          IR[row+3,col+2]=IR[row+2,col+2] #O
          IR[row+3,col+1]=IR[row+2,col+1] #N
          IR[row+3,col]=IR[row+2,col+1] #M

for row in range(0,h,4): # loop step is 4 since our mask size is 4.
    for col in range(0,w,4): # loop step is 4 since our mask size is 4.
          IB[row+1,col+1]=(int(img[row+1,col])+int(img[row+1,col+2]))/2 #F          
          IB[row+2,col]= (int(img[row+1,col])+int(img[row+3,col]))/2 #I         
          IB[row+2,col+1]= (int(img[row+1,col])+int(img[row+1,col+2])+int(img[row+3,col])+int(img[row+3,col+2]))/4  #J
          IB[row+2,col+2]= (int(img[row+1,col+2])+int(img[row+3,col+2]))/2  #K
          IB[row+3,col+1]=(int(img[row+3,col])+int(img[row+3,col+2]))/2 #N
          IB[row+1,col+3]=IB[row+1,col+2] #H
          IB[row,col]=IB[row+1,col] #A
          IB[row,col+1]=IB[row+1,col+1] #B
          IB[row,col+2]=IB[row+1,col+2] #C
          IB[row,col+3]=IB[row+1,col+3] #D      
          IB[row+2,col+3]=IB[row+2,col+2] #L          
          IB[row+3,col+3]=IB[row+3,col+2] #P




# merge the channels
rgb[:,:,0]=IR
rgb[:,:,1]=IG
rgb[:,:,2]=IB





plt.imshow(rgb),plt.title('rgb')
plt.show()

